#!/usr/bin/env python

import os, sys
from munin.mongodb import MuninMongoDBPlugin

class MonqueJobDurationPlugin(MuninMongoDBPlugin):
    args = "-l 0 --base 1000"
    vlabel = "seconds"
    title = "Monque duration"
    info = "Operations"
    category = "Monque"

    @property
    def fields(self):
        # dynamically create the list 
        self.queues = []
        cur = self.db['monque:queue_stats'].find()
        for row in cur:
            try:
                queue = row['queue']
                self.queues.append(queue)
            except KeyError:
                pass
        fie = [
            (queue+"_success_duration", dict(
                label = "%s success duration" % queue,
                info = "%s avg successful job duration" % queue,
                type = "GAUGE",
            )) for queue in self.queues
        ] + [
            (queue+"_failure_duration", dict(
                label = "%s failure duration" % queue,
                info = "%s avg failed job duration" % queue,
                type = "GAUGE",
            )) for queue in self.queues
        ]
        return fie

    def execute(self):
        result = dict()
        cur = self.db['monque:queue_stats'].find()
        for obj in cur:
            queue = obj['queue']
            successes = obj['successes']
            failures = obj['failures']
            success_duration = obj['success_duration']
            failure_duration = obj['failure_duration']
            if successes!=0:
                result['%s_success_duration' % queue] = success_duration / successes
            if failures!=0:
                result['%s_failure_duration' % queue] = failure_duration / failures
            self.db['monque:queue_stats'].update(dict(queue=queue), {'$set': dict(successes=0, failures=0, success_duration=0, failure_duration=0)})
        return result

if __name__ == "__main__":
    MonqueJobDurationPlugin().run()
